# 运行用户
#user  nobody;

# 启动进程,通常设置成和cpu的数量相等
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#工作模式及连接数上限
events {
    # 参考事件模型,use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型,如果跑在FreeBSD上面,就用kqueue模型.
    use   epoll; # epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    # 单个进程最大连接数（最大连接数=连接数*进程数）
    worker_connections  65535;  # 单个后台worker process进程的最大并发链接数
    # multi_accept on;
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
    server_tokens off; # 隐藏版本号
    include       mime.types; # 设定mime类型,类型由mime.type文件定义
    default_type  application/octet-stream; # 默认文件类型
    #charset utf-8; # 默认编码

    # 设定日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile on; # 开启高效文件传输模式,sendfile指令指定nginx是否调用sendfile函数来输出文件,对于普通应用设为 on,如果用来进行下载等应用磁盘IO重负载应用,可设置为off,以平衡磁盘与网络I/O处理速度,降低系统的负载.注意：如果图片显示不正常把这个改成off.
    tcp_nopush on; # 防止网络阻塞
    tcp_nodelay on; # 防止网络阻塞

    client_max_body_size 4096M; #客户端请求体的大小,上传文件大于100M需要

    #keepalive_timeout  0;
    keepalive_timeout  65; # (单位s)设置客户端连接保持活动的超时时间,在超过这个时间后服务器会关闭该链接
    proxy_connect_timeout 900;
    proxy_send_timeout 900;
    proxy_read_timeout 900;
    send_timeout 900;

    # gzip模块设置
    #gzip  on; # 开启gzip压缩输出

    #开启限制IP连接数的时候需要使用
    #limit_zone crawler $binary_remote_addr 10m;

    ssl_certificate      cert.pem; # 需要在nginx.conf中声明一下，否则报错 http://gitfree.me/2017/05/02/nginx-no-ssl-certificate-problem/
    ssl_certificate_key  cert.key; # 需要在nginx.conf中声明一下，否则报错 http://gitfree.me/2017/05/02/nginx-no-ssl-certificate-problem/

    include conf.d/*.conf;

}
